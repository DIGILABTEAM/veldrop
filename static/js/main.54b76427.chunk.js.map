{"version":3,"sources":["reducers/actions.js","reducers/thunks.js","views/EnterNameView.js","views/LeaderBoardView.js","views/GameStatusView.js","views/TileView.js","views/PuzzleView.js","views/RestartButtonsView.js","constants.js","views/GameHeaderView.js","views/GameView.js","App.js","reportWebVitals.js","game-configs.js","reducers/tileset-functions.js","reducers/tile-game-reducer.js","index.js"],"names":["INIT_GAME","SHUFFLE_TILES","REVERSE_TILES","SELECT_TILE","HIGHSCORE_LIST_LOADED","NAME_CHANGED","HIGHSCORE_LIST_SAVED","initGame","gameId","imageNumber","type","shuffleTiles","fetchHighScoreList","_x","_x2","_fetchHighScoreList","apply","this","arguments","_callee","dispatch","getState","url","result","regenerator_default","a","wrap","_context","prev","next","process","length","abrupt","concat","highScoreListId","get","sent","highScoreList","t0","console","error","stop","updateHighScoreList","_x3","_x4","_updateHighScoreList","_callee2","state","body","getUrl","_context2","userName","score","turnNo","id","userId","post","_callee3","response","_context3","fetch","headers","ApiKey","ok","Error","json","_callee4","_context4","method","Content-Type","JSON","stringify","EnterNameView","connect","highScorePosition","onSubmitNameToHighScore","onNameChanged","name","nameChanged","props","_useState","useState","_useState2","Object","slicedToArray","setUserName","react_default","createElement","Fragment","minLength","maxLength","required","onChange","event","target","value","className","onClick","LeaderBoardView","rows","results","map","r","idx","key","Date","utcDateTime","toLocaleDateString","unit","GameStatusView","gameComplete","numClicksWithinTurn","highScoreListSaved","views_EnterNameView","views_LeaderBoardView","TileView","i","top","Math","floor","size","tileWidth","left","imPath","window","location","href","style","backgroundPosition","backgroundImage","backgroundSize","width","correctPos","objectSpread","outline","outlineOffset","selected","PuzzleView","tiles","selectedId","onTileClicked","selectTile","_useWindowSize","useWindowSize","_useWindowSize2","winWidth","winHeight","max","min","tileWrapperStyle","tileContainerStyle","gridTemplateColumns","t","views_TileView","RestartButtonsView","onInitGame","random","GameHeaderView","gameName","GameView","views_GameHeaderView","views_GameStatusView","views_PuzzleView","views_RestartButtonsView","App","views_GameView","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","gameConfigs","highscorelistid","generateTileSet","newTilesArray","newTile","push","initialState","undefined","tileGame","action","assign","numClicks","newTiles","setWithSwappedTiles","sourceId","destId","copy","toConsumableArray","sourceIdx","findIndex","source","destIdx","dest","swapTilesInSet","allTilesAreAligned","newUserId","uuidv4","idxInHighScoreList","userTime","resultsCopy","time","isNaN","parse","sort","b","maxSize","getIndexInHighScoreList","now","shuffle","reverse","reverseTileSet","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.54b76427.chunk.js","sourcesContent":["export const INIT_GAME = 'INIT_GAME';\nexport const SHUFFLE_TILES = 'SHUFFLE_TILES';\nexport const REVERSE_TILES = 'REVERSE_TILES';\nexport const SELECT_TILE = 'SELECT_TILE';\nexport const HIGHSCORE_LIST_LOADED = 'HIGHSCORE_LIST_LOADED';\nexport const NAME_CHANGED = 'NAME_CHANGED';\nexport const HIGHSCORE_LIST_SAVED = 'HIGHSCORE_LIST_SAVED';\n\nexport function initGame(gameId, imageNumber) {\n    return { type: INIT_GAME, gameId, imageNumber };\n}\n\nexport function selectTile(id) {\n    return { type: SELECT_TILE, id };\n}\n\nexport function shuffleTiles() {\n    return {\n        type: SHUFFLE_TILES\n    };\n}\n\nexport function reverseTiles() {\n    return {\n        type: REVERSE_TILES\n    };\n}\n\nexport function highScoreListLoaded(highScoreList) {\n    return { type: HIGHSCORE_LIST_LOADED, highScoreList };\n}\n\nexport function nameChanged(name) {\n    return { type: NAME_CHANGED, name };\n}\n\nexport function highScoreListSaved(highScoreList) {\n    return { type: HIGHSCORE_LIST_SAVED, highScoreList };\n}","import {\n    HIGHSCORE_LIST_LOADED,\n    HIGHSCORE_LIST_SAVED\n} from './actions';\n\nexport async function fetchHighScoreList(dispatch, getState) {\n    if (process.env.REACT_APP_APIURL.length === 0) {\n        return;\n    }\n    let url = `${process.env.REACT_APP_APIURL}/highscore-lists/${getState().highScoreListId}`;\n    try {\n        let result = await get(url);\n        dispatch({\n            type: HIGHSCORE_LIST_LOADED,\n            highScoreList: result\n        });\n    } catch (e) {\n        console.error('Network request failed');\n    }\n}\n\nexport async function updateHighScoreList(dispatch, getState) {\n    if (process.env.REACT_APP_APIURL.length === 0) {\n        return;\n    }\n\n    let url = `${process.env.REACT_APP_APIURL}/highscore-lists/${getState().highScoreListId}/game-results`;\n\n    var state = getState();\n\n    if (!state.userName || state.userName.length === 0) {\n        return;\n    }\n\n    let body = {\n        userName: state.userName,\n        score: state.turnNo - 1,\n        id: state.userId\n    };\n\n    try {\n        await post(url, body);\n    } catch (e) {\n        console.error('Network request failed3');\n        return;\n    }\n\n    let getUrl = `${process.env.REACT_APP_APIURL}/highscore-lists/${getState().highScoreListId}`;\n    let result = await get(getUrl);\n\n    dispatch({\n        type: HIGHSCORE_LIST_SAVED, highScoreList: result\n    });\n}\n\nasync function get(url) {\n    try {\n        let response = await fetch(url, {\n            headers: {\n                ApiKey: `${process.env.REACT_APP_APIKEY}`\n            }\n        });\n        if (!response.ok) {\n            throw Error('Network request failed');\n        }\n        return await response.json();\n    } catch (e) {\n        throw Error('Network request failed');\n    }\n}\n\nasync function post(url, body) {\n    try {\n        let response = await fetch(url, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                ApiKey: `${process.env.REACT_APP_APIKEY}`\n            },\n            body: JSON.stringify(body),\n        });\n        if (!response.ok) {\n            throw Error('Network request failed');\n        }\n    } catch (e) {\n        throw Error('Network request failed');\n    }\n}\n\n","\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux'\nimport { nameChanged } from '../reducers/actions';\nimport { updateHighScoreList } from '../reducers/thunks';\nimport PropTypes from 'prop-types';\n\nconst EnterName = props => {\n\n    const [userName, setUserName] = useState('');\n\n    return <>\n        <div>\n            YOU MADE IT TO #{props.highScorePosition} on the leaderboard!\n        </div>\n        Enter your name:\n        <input\n            type='text'\n            minLength='3' maxLength='25'\n            required\n            onChange={(event) => {\n                setUserName(event.target.value);\n                props.onNameChanged(event.target.value);\n            }}\n        />\n        <div>\n            {userName.length >= 3 && userName.length <= 25 &&\n                <button className='game-button' onClick={() => props.onSubmitNameToHighScore(userName)}>Submit</button>\n            }\n        </div>\n    </>;\n}\n\nEnterName.propTypes = {\n    highScorePosition: PropTypes.number,\n    onNameChanged: PropTypes.func,\n    onSubmitNameToHighScore: PropTypes.func\n};\n\nconst mapStateToProps = state => {\n    return {\n        highScorePosition: state.highScorePosition,\n        highScoreList: state.highScoreList,\n    };\n};\n\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onSubmitNameToHighScore: () => {\n            dispatch(updateHighScoreList);\n        },\n        onNameChanged: (name) => {\n            dispatch(nameChanged(name));\n        }\n    }\n}\n\nconst EnterNameView = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(EnterName)\n\nexport default EnterNameView;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst LeaderBoardView = (props) => {\n    if (!props.highScoreList) return <></>;\n    const rows = props.highScoreList.results.map((r, idx) => {\n        let className = '';\n        if (props.userId && r.id === props.userId) {\n            className = 'user-row-in-highscore';\n        }\n        return <tr className={className} key={idx + 1}>\n            <td>#{idx + 1}</td\n            ><td>{r.userName}</td>\n            <td className='date-column'>{(new Date(r.utcDateTime)).toLocaleDateString()}</td>\n            <td>{r.score}</td></tr>;\n    });\n    return <>\n        <div>\n            <h3>{props.highScoreList.name}</h3>\n            <table className=\"highscoretable\">\n                <thead>\n                    <tr>\n                        <th>Position</th>\n                        <th>Name</th>\n                        <th className='date-column'>Date</th>\n                        <th>{props.highScoreList.unit}</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {rows}\n                </tbody>\n            </table>\n        </div>\n    </>;\n}\n\nLeaderBoardView.propTypes = {\n    highScoreList: PropTypes.object,\n    name: PropTypes.string,\n    unit: PropTypes.string,\n    userId: PropTypes.string\n};\n\nexport default LeaderBoardView;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux'\nimport EnterNameView from './EnterNameView';\nimport LeaderBoardView from './LeaderBoardView';\n\nconst GameStatus = props => {\n    if (props.gameComplete) {\n        return <div className='game-status'>\n            <div>GAME COMPLETE!</div>\n            <div>You used {props.turnNo - 1} turns</div>\n            {props.highScorePosition > 0 && !props.highScoreListSaved && (\n                <EnterNameView />\n            )}\n            {props.highScorePosition > 0 && props.highScoreListSaved && (\n                <LeaderBoardView\n                    highScoreList={props.highScoreList}\n                    userId={props.userId}\n                />\n            )}\n        </div>\n    } else {\n        return <div className='game-status'>\n            Turn: <b>{props.turnNo}</b>\n            <div className='game-instructions'>\n                {props.numClicksWithinTurn === 0 &&\n                    <div>\n                        Click on the tile that should be moved\n                    </div>\n                }\n                {props.numClicksWithinTurn === 1 &&\n                    <div>\n                        Click on the tile that should be swapped with the first selected tile\n                    </div>\n                }\n            </div>\n        </div>\n    }\n}\n\nGameStatus.propTypes = {\n    gameComplete: PropTypes.bool,\n    turnNo: PropTypes.number,\n    numClicksWithinTurn: PropTypes.number,\n    highScorePosition: PropTypes.number,\n    highScoreListSaved: PropTypes.bool,\n    highScoreList: PropTypes.object,\n    userId: PropTypes.string,\n};\n\nconst mapStateToProps = state => {\n    return {\n        gameComplete: state.gameComplete,\n        turnNo: state.turnNo,\n        numClicksWithinTurn: state.numClicksWithinTurn,\n        highScoreList: state.highScoreList,\n        highScorePosition: state.highScorePosition,\n        highScoreListSaved: state.highScoreListSaved,\n        userId: state.userId\n    }\n};\n\nconst GameStatusView = connect(\n    mapStateToProps\n)(GameStatus)\n\nexport default GameStatusView;\n","import React from 'react';\nimport './Game.css';\nimport PropTypes from 'prop-types';\n\nfunction TileView(props) {\n    const i = props.id;\n    const top = -(Math.floor(i / props.size)) * props.tileWidth;\n    const left = i < props.size ? -i * props.tileWidth : -(i % props.size) * props.tileWidth;\n\n    const imPath = `${window.location.href}/images/img${props.imageNumber}.jpg`;\n    let style = {\n        backgroundPosition: `left ${left}px top ${top}px`,\n        backgroundImage: `url('${imPath}')`,\n        backgroundSize: `${props.width}px`\n    }\n\n    if (props.correctPos) {\n        // Use a special style as a hint on that the tile is on\n        // the correct position\n        style = {\n            ...style,\n            outline: '1px solid white',\n            outlineOffset: '-10px',\n        }\n    }\n\n    let className = props.selected ? 'tile selected' : 'tile';\n    return (\n        <div className={className}\n            style={style}\n            onClick={() => props.onClick(props.id)}\n        >\n        </div>\n    );\n}\n\nTileView.propTypes = {\n    id: PropTypes.number,\n    size: PropTypes.number,\n    tileWidth: PropTypes.number,\n    selected: PropTypes.bool,\n    correctPos: PropTypes.bool,\n    imageNumber: PropTypes.number,\n    onClick: PropTypes.func,\n    width: PropTypes.number\n};\n\nexport default TileView;\n","import React from 'react';\nimport { connect } from 'react-redux'\nimport TileView from './TileView'\nimport { selectTile } from '../reducers/actions';\nimport PropTypes from 'prop-types';\nimport {\n    useWindowSize\n} from '@react-hook/window-size/throttled'\n\nconst Puzzle = (props) => {\n    const [winWidth, winHeight] = useWindowSize();\n    const width = Math.max(Math.min(winWidth, winHeight - 258), 200);\n    const tileWidth = width / props.size;\n    const tileWrapperStyle = {\n        width: `${props.size * tileWidth}px`\n    }\n    const tileContainerStyle = {\n        gridTemplateColumns: `repeat(${props.size},${tileWidth}px)`\n    }\n\n    return (\n        <div>\n            <div className='tile-wrapper' style={tileWrapperStyle}>\n                <div className='tile-container' style={tileContainerStyle}>\n                    {\n                        props.tiles.map((t, idx) =>\n                            <TileView key={idx}\n                                id={t.id}\n                                correctPos={t.id === idx}\n                                imageNumber={props.imageNumber}\n                                onClick={props.onTileClicked}\n                                tileWidth={tileWidth}\n                                size={props.size}\n                                selected={props.selectedId === t.id}\n                                width={width}\n                            />)\n                    }\n                </div>\n            </div>\n        </div>\n    );\n}\n\nPuzzle.propTypes = {\n    onTileClicked: PropTypes.func,\n    size: PropTypes.number,\n    tiles: PropTypes.array,\n    imageNumber: PropTypes.number,\n    selectedId: PropTypes.number\n};\n\nconst mapStateToProps = state => {\n    return {\n        size: state.size,\n        tiles: state.tiles,\n        imageNumber: state.imageNumber,\n        selectedId: state.selectedId\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onTileClicked: id => {\n            dispatch(selectTile(id));\n        }\n    }\n}\n\nconst PuzzleView = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Puzzle)\n\nexport default PuzzleView;\n","import React from 'react';\nimport { connect } from 'react-redux'\nimport { GameId_4x4, GameId_5x5, GameId_6x6, GameId_7x7, NumImages } from '../constants';\nimport { initGame, shuffleTiles } from '../reducers/actions';\nimport './Game.css';\nimport PropTypes from 'prop-types';\nimport { fetchHighScoreList } from '../reducers/thunks';\n\nconst RestartButtons = (props) =>\n    <>\n        <button className='game-button' onClick={() => props.onInitGame(GameId_4x4)}>Restart 4x4</button>\n        <button className='game-button' onClick={() => props.onInitGame(GameId_5x5)}>Restart 5x5</button>\n        <button className='game-button' onClick={() => props.onInitGame(GameId_6x6)}>Restart 6x6</button>\n        <button className='game-button' onClick={() => props.onInitGame(GameId_7x7)}>Restart 7x7</button>\n    </>;\n\nRestartButtons.propTypes = {\n    onInitGame: PropTypes.func\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onInitGame: gameId => {\n            dispatch(initGame(gameId, Math.floor(Math.random() * NumImages) + 1));\n            dispatch(shuffleTiles());\n            dispatch(fetchHighScoreList);\n        }\n    }\n}\n\nconst RestartButtonsView = connect(\n    null,\n    mapDispatchToProps\n)(RestartButtons)\n\nexport default RestartButtonsView;\n\n\n","export const NumImages = 18;\nexport const GameId_4x4 = 0;\nexport const GameId_5x5 = 1;\nexport const GameId_6x6 = 2;\nexport const GameId_7x7 = 3;\n","import React from 'react';\nimport './Game.css';\nimport PropTypes from 'prop-types';\n// import images from 'images/logo.png';\n\nconst GameHeaderView = (props) =>\n    <>\n        <header className='game-header'>\n            <div className='game-title'> CETANIL-TM</div>\n        </header>\n        <div><h2>{props.gameName}</h2></div>\n    </>;\n\n// function Home() {\n//     return (\n//         <div>\n//             <img src={images / logo.png} alt=\"Centanil.logo\" />\n//         </div>\n//     );\n// }\n\nGameHeaderView.propTypes = {\n    gameName: PropTypes.string,\n};\n\nexport default GameHeaderView;","import React from 'react';\nimport './Game.css';\nimport GameStatusView from './GameStatusView';\nimport PuzzleView from './PuzzleView';\nimport RestartButtonsView from './RestartButtonsView';\nimport GameHeaderView from './GameHeaderView';\nimport LeaderBoardView from './LeaderBoardView';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nconst Game = (props) =>\n    <div className='game'>\n        <GameHeaderView gameName={props.gameName} />\n        <GameStatusView />\n        <PuzzleView />\n        <RestartButtonsView />\n        <LeaderBoardView highScoreList={props.highScoreList} />\n    </div>\n\nGame.propTypes = {\n    gameName: PropTypes.string,\n    highScoreList: PropTypes.object\n};\n\nconst mapStateToProps = state => {\n    return {\n        gameName: state.gameName,\n        highScoreList: state.highScoreList\n    }\n}\n\nconst GameView = connect(\n    mapStateToProps\n)(Game)\n\nexport default GameView;\n","import './App.css';\nimport GameView from './views/GameView';\nimport React from 'react';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <GameView />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({\n            getCLS,\n            getFID,\n            getFCP,\n            getLCP,\n            getTTFB\n        }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;","export const gameConfigs = [\n    {\n        'name': '4x4 Puzzle',\n        'size': 4,\n        'highscorelistid': process.env.REACT_APP_HIGHSCORELISTID_4x4\n    },\n    {\n        'name': '5x5 Puzzle',\n        'size': 5,\n        'highscorelistid': process.env.REACT_APP_HIGHSCORELISTID_5x5\n    },\n    {\n        'name': '6x6 Puzzle',\n        'size': 6,\n        'highscorelistid': process.env.REACT_APP_HIGHSCORELISTID_6x6\n    },\n    {\n        'name': '7x7 Puzzle',\n        'size': 7,\n        'highscorelistid': process.env.REACT_APP_HIGHSCORELISTID_7x7\n    }\n]\n","\nimport shuffle from 'shuffle-array';\n\nexport function generateTileSet(size) {\n    let newTilesArray = [];\n    for (let i = 0; i < size * size; i++) {\n        let newTile = {\n            id: i,\n            top: -(Math.floor(i / size)) * 100,\n            left: i < size ? -i * 100 : -(i % size) * 100,\n        };\n        newTilesArray.push(newTile);\n    }\n    return newTilesArray;\n}\n\nexport function reverseTileSet(tiles) {\n    return [...tiles].reverse();\n}\n\nexport function shuffleTileSet(tiles) {\n    return shuffle([...tiles]);\n}\n\nexport function swapTilesInSet(tiles, sourceId, destId) {\n    const copy = [...tiles];\n    let sourceIdx = copy.findIndex(t => t.id === sourceId);\n    let source = copy[sourceIdx];\n    let destIdx = copy.findIndex(t => t.id === destId);\n    let dest = Object.assign({}, copy[destIdx]);\n    copy[destIdx] = source;\n    copy[sourceIdx] = dest;\n    return copy;\n}\n\nexport function allTilesAreAligned(tiles) {\n    for (let i = 0; i < tiles.length; i++) {\n        if (tiles[i].id !== i) {\n            return false;\n        }\n    }\n    return true;\n}\n\nexport function getIndexInHighScoreList(newUserId, userTime, score, highScoreList) {\n    const resultsCopy = highScoreList.results.map(r => {\n        return {\n            id: r.id,\n            score: r.score,\n            time: isNaN(Date.parse(r.utcDateTime)) ? 0 : Date.parse(r.utcDateTime)\n        }\n    });\n    resultsCopy.push({\n        id: newUserId,\n        score,\n        time: userTime\n    });\n    resultsCopy.sort((a, b) => (a.score - b.score) || (b.time - a.time));\n\n    let idxInHighScoreList = resultsCopy.findIndex(r => r.id === newUserId);\n    if (idxInHighScoreList > -1 && (idxInHighScoreList + 1 <= highScoreList.maxSize)) {\n        return idxInHighScoreList;\n    } else {\n        return -1;\n    }\n}\n","import { gameConfigs } from '../game-configs';\nimport {\n    HIGHSCORE_LIST_LOADED, HIGHSCORE_LIST_SAVED, INIT_GAME, NAME_CHANGED, REVERSE_TILES, SELECT_TILE, SHUFFLE_TILES\n} from './actions';\nimport { allTilesAreAligned, generateTileSet, reverseTileSet, shuffleTileSet, swapTilesInSet, getIndexInHighScoreList } from './tileset-functions';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst initialState = {\n    turnNo: 1,\n    numClicksWithinTurn: 0,\n    selectedId: undefined,\n    gameComplete: false,\n    imageNumber: 1,\n    tiles: [],\n    size: undefined,  // number of rows/columns in the puzzle matrix\n    gameId: undefined,\n    gameName: undefined,\n    highScoreList: undefined,\n    highScorePosition: -1,\n    userName: undefined,\n    userId: undefined,\n    highScoreListSaved: false\n};\n\n\n// The reducer for the game\n// State is an object with game status and an array of tiles\n// The array represents a size*size matrix with a unique \n// numerical value 0...size*size-1 per tile\n// A tile is an object with these properties:\n// {\n//    id: number, // the number/value for the tile\n//    top: number, // pixel offset for the image that is projected on the tile\n//    left: number // pixel offset for the image that is projected on the tile\n// }\n//    \nfunction tileGame(state = initialState, action) {\n    switch (action.type) {\n        case INIT_GAME: {\n            const size = gameConfigs[action.gameId].size\n            return Object.assign({}, initialState,\n                {\n                    gameId: action.gameId,\n                    size,\n                    gameName: gameConfigs[action.gameId].name,\n                    imageNumber: action.imageNumber,\n                    tiles: generateTileSet(size),\n                    highScoreListId: gameConfigs[action.gameId].highscorelistid\n                });\n        }\n\n        case SELECT_TILE: {\n            if (state.gameComplete) {\n                return state;\n            }\n            if (action.id < 0 || action.id > (state.size * state.size - 1)) {\n                return state;\n            }\n            const numClicks = state.numClicksWithinTurn + 1;\n            if (numClicks === 1) {\n                const newTiles = state.tiles.map(t => t);\n                return Object.assign({}, state, {\n                    selectedId: action.id,\n                    numClicksWithinTurn: numClicks,\n                    gameComplete: false,\n                    tiles: newTiles\n                });\n            }\n\n            const newTiles = state.tiles.map(t => t);\n            if (action.id === state.selectedId) {\n                return Object.assign({}, state, {\n                    selectedId: undefined,\n                    numClicksWithinTurn: 0,\n                    tiles: newTiles\n                });\n            }\n            const setWithSwappedTiles = swapTilesInSet(newTiles, state.selectedId, action.id);\n            const gameComplete = allTilesAreAligned(setWithSwappedTiles);\n\n            if (gameComplete && state.highScoreList) {\n                const newUserId = uuidv4();\n                const time = Date.now();\n                const idxInHighScoreList = getIndexInHighScoreList(newUserId, time, state.turnNo + 1, state.highScoreList);\n                if (idxInHighScoreList > -1) {\n                    // User made it into the leaderboard\n                    return Object.assign({}, state, {\n                        selectedId: undefined,\n                        numClicksWithinTurn: 0,\n                        gameComplete,\n                        turnNo: state.turnNo + 1,\n                        tiles: setWithSwappedTiles,\n                        highScorePosition: idxInHighScoreList + 1,\n                        userId: newUserId\n                    });\n                } else {\n                    // User dit not make it into the leaderboard\n                    return Object.assign({}, state, {\n                        selectedId: undefined,\n                        numClicksWithinTurn: 0,\n                        gameComplete,\n                        turnNo: state.turnNo + 1,\n                        tiles: setWithSwappedTiles,\n                        highScorePosition: idxInHighScoreList + 1\n                    });\n                }\n            }\n            return Object.assign({}, state, {\n                selectedId: undefined,\n                numClicksWithinTurn: 0,\n                gameComplete,\n                turnNo: state.turnNo + 1,\n                tiles: setWithSwappedTiles\n            });\n        }\n\n        case SHUFFLE_TILES: {\n            const newTiles = shuffleTileSet(state.tiles);\n            return Object.assign({}, state, { tiles: newTiles });\n        }\n\n        case REVERSE_TILES: {\n            const newTiles = reverseTileSet(state.tiles);\n            return Object.assign({}, state, { tiles: newTiles });\n        }\n\n        case HIGHSCORE_LIST_LOADED: {\n            return Object.assign({}, state, {\n                highScoreList: action.highScoreList\n            });\n        }\n        case NAME_CHANGED: {\n            return Object.assign({}, state, {\n                userName: action.name\n            });\n        }\n        case HIGHSCORE_LIST_SAVED: {\n            return Object.assign({}, state, {\n                highScoreListSaved: true,\n                highScoreList: action.highScoreList\n            });\n        }\n        default:\n            return state;\n    }\n}\n\nexport default tileGame;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport tileGame from './reducers/tile-game-reducer'\nimport { initGame, shuffleTiles } from './reducers/actions';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\nimport { GameId_4x4, NumImages } from './constants';\nimport { fetchHighScoreList } from './reducers/thunks';\n\n// For integration with Redux DevTools in browser\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(tileGame, composeEnhancers(\n    applyMiddleware(thunk)\n));\n\nstore.dispatch(initGame(GameId_4x4, Math.floor(Math.random() * NumImages) + 1));\nstore.dispatch(shuffleTiles())\nstore.dispatch(fetchHighScoreList);\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}